/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "PreMeasureAnalyzer.h"


//==============================================================================
class MelodyAnalyzerApplication  : public JUCEApplication
{
public:
    //==============================================================================
    MelodyAnalyzerApplication()
    {
    }

    ~MelodyAnalyzerApplication()
    {
    }

    //==============================================================================
    void initialise (const String& commandLine)
    {
        FileChooser fChoose("Choose files");
        while (fChoose.browseForMultipleFilesToOpen()) {
            Array<File> const f = fChoose.getResults();
            double pitchCounts[12];
            double intervalCounts[13];
            double tatumCounts[16];
            
            for (int i = 0; i < 12; i++) {
                pitchCounts[i] = 0;
            }
            for (int i = 0; i < 13; i++) {
                intervalCounts[i] = 0;
            }
            for (int i = 0; i < 16; i++) {
                tatumCounts[i] = 0;
            }
            
            
            for (int i = 0; i < f.size(); i++) {
                FileInputStream fis(f[i]);
                MidiFile file;
                bool b = file.readFrom(fis);
                if (!b) {
                    quit();
                }
                const MidiMessageSequence* sequence = file.getTrack(0);
                PreMeasureAnalyzer a(*sequence);
                for (int i = 0; i < 12; i++) {
                    pitchCounts[i] += a.pitchCounts[i]/f.size();
                }
                for (int i = 0; i < 13; i++) {
                    intervalCounts[i] += a.intervalCounts[i]/f.size();
                }
                for (int i = 0; i < 16; i++) {
                    tatumCounts[i] += a.tatumCounts[i]/f.size();
                }
                
                
            }
            
            File const fout(f[0].getParentDirectory().getFullPathName() + "output.txt");
            fout.create();
            FileOutputStream fos(fout);
            String fileText = "Pitch Data:\n";
            for (int i = 0; i < 12; i++) {
                fileText += String(pitchCounts[i]) + "\n";
            }
            fileText += "\nInterval Data:\n";
            
            for (int i = 0; i < 13; i++) {
                fileText += String(intervalCounts[i]) + "\n";
            }
            fileText += "\nTatum Data:\n";
            for (int i = 0; i < 16; i++) {
                fileText += String(tatumCounts[i]) + "\n";
            }
            String const& finalFileText = fileText;
            fos.writeText(finalFileText, false, false);
        }
        quit();
    }

    void shutdown()
    {
        // Do your application's shutdown code here..
        
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        quit();
    }

    //==============================================================================
    const String getApplicationName()
    {
        return "MelodyAnalyzer";
    }

    const String getApplicationVersion()
    {
        return ProjectInfo::versionString;
    }

    bool moreThanOneInstanceAllowed()
    {
        return true;
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        
    }

private:
    
};

//==============================================================================
// This macro generates the main() routine that starts the app.
START_JUCE_APPLICATION(MelodyAnalyzerApplication)
